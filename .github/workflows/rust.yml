name: Rust

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Install musl-tools
      run: sudo apt-get install musl-tools
    - name: Install libssl dependencies
      run: sudo apt-get install gcc make pkg-config libssl-dev
    - name: Install x86_64-unknown-linux-musl
      run: rustup target add x86_64-unknown-linux-musl
    - name: Build x86_64-unknown-linux-musl
      run: cargo build --release --target x86_64-unknown-linux-musl
    - name: Run tests
      run: cargo test --verbose
    - name: Install mingw-w64
      run: sudo apt-get install mingw-w64
    - name: Install x86_64-pc-windows-gnu target
      run: rustup target add x86_64-pc-windows-gnu
    - name: Build x86_64-pc-windows-gnu
      run: cargo build --release --target x86_64-pc-windows-gnu
    - name: Install aarch64-unknown-linux-musl
      run: rustup target add aarch64-unknown-linux-musl
    #- name: Build aarch64-unknown-linux-musl
    #  run: cargo build --release --target aarch64-unknown-linux-musl
    - name: Upload a Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: target
        path: |
          target
    - name: Cache
      uses: actions/cache@v4
      with:
        path: |
          target
        key: target
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Upload x86_64 Linux MUSL Release Asset
      id: upload-x86_64-unknown-linux-musl-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./target/x86_64-unknown-linux-musl/release/anttp
        asset_name: anttp
        asset_content_type: application/octet-stream
#    - name: Upload x86_64 PC Windows GNU Release Asset
#      id: upload-x86_64-pc-windows-gnu-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: ./target/x86_64-pc-windows-gnu/release/anttp.exe
#        asset_name: anttp.exe
#        asset_content_type: application/octet-stream
#    - name: Upload AARCH 64 Linux MUSL Release Asset
#      id: upload-aarch64-unknown-linux-musl-release-asset
#      uses: actions/upload-release-asset@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
#        asset_path: ./target/aarch64-unknown-linux-musl/release/anttp
#        asset_name: aarch64_anttp
#        asset_content_type: application/octet-stream
